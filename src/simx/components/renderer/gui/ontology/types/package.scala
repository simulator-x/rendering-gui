package simx.components.renderer.gui.ontology

/**
 * This file is automatically generated from an ontology.
 * DO NOT EDIT!
 */

import simx.components.renderer.gui.ontology.functions.Functions
import simx.core.ontology.types._
import simx.core.entity.description.SVal
import simx.core.entity.description.SValHistory

package object types{
  def init(){}
	object Gui extends simx.core.ontology.SValDescription[simx.core.svaractor.SVarActor.Ref,simx.core.svaractor.SVarActor.Ref,simx.core.svaractor.semantictrait.base.ValueDescription[simx.core.svaractor.semantictrait.base.ValueDescription[simx.core.svaractor.semantictrait.base.Base,simx.core.ontology.Symbols.actor.SymbolType],simx.core.ontology.Symbols.component.SymbolType],simx.core.ontology.Symbols.gui.SymbolType](simx.core.ontology.types.Component as simx.core.ontology.Symbols.gui definedAt "http://www.hci.uni-wuerzburg.de/ontologies/simx/components/renderer/Gui/Gui.owl#Gui") with simx.core.ontology.types.SemanticSValType[Gui] {
		override def apply(value: dataType): SemanticSValType = new Gui(value, -1L, Nil)
		override def apply(value: dataType, timestamp : scala.Long): SemanticSValType = new Gui(value, timestamp, Nil)
		override def apply(value: dataType, timestamp : scala.Long, history: simx.core.entity.description.HistoryStorage.HistoryType[simx.core.svaractor.SVarActor.Ref]) = new GuiWithHistory(value, timestamp, history)
	}
	class Gui(private val _value : Gui.dataType, private val _timestamp: scala.Long, private val _history: simx.core.entity.description.HistoryStorage.HistoryType[simx.core.svaractor.SVarActor.Ref]) extends simx.core.entity.description.SVal[simx.core.svaractor.SVarActor.Ref,simx.core.entity.typeconversion.TypeInfo[simx.core.svaractor.SVarActor.Ref,simx.core.svaractor.SVarActor.Ref],simx.core.svaractor.semantictrait.base.ValueDescription[simx.core.svaractor.semantictrait.base.ValueDescription[simx.core.svaractor.semantictrait.base.Base,simx.core.ontology.Symbols.actor.SymbolType],simx.core.ontology.Symbols.component.SymbolType],simx.core.ontology.Symbols.gui.SymbolType](_value, Gui.valueDescription, Gui, _timestamp, _history) {
		def withHistory = new GuiWithHistory(value, timestamp, history)
	}
	class GuiWithHistory(_v: simx.core.svaractor.SVarActor.Ref, _t: scala.Long, _h: simx.core.entity.description.HistoryStorage.HistoryType[simx.core.svaractor.SVarActor.Ref]) extends Gui(_v,_t,_h) with SValHistory[simx.core.svaractor.SVarActor.Ref,simx.core.ontology.Symbols.gui.SymbolType,Gui] {
		def newNonHistoryInstance(value: simx.core.svaractor.SVarActor.Ref) = Gui(value)
	}
	
	object IsDraggable extends simx.core.ontology.SValDescription[scala.Boolean,scala.Boolean,simx.core.svaractor.semantictrait.base.ValueDescription[simx.core.svaractor.semantictrait.base.Base,simx.core.ontology.Symbols.boolean.SymbolType],simx.core.ontology.Symbols.isDraggable.SymbolType](simx.core.ontology.types.Boolean as simx.core.ontology.Symbols.isDraggable definedAt "http://www.hci.uni-wuerzburg.de/ontologies/simx/components/renderer/Gui/Gui.owl#IsDraggable") with simx.core.ontology.types.SemanticSValType[IsDraggable] {
		override def apply(value: dataType): SemanticSValType = new IsDraggable(value, -1L, Nil)
		override def apply(value: dataType, timestamp : scala.Long): SemanticSValType = new IsDraggable(value, timestamp, Nil)
		override def apply(value: dataType, timestamp : scala.Long, history: simx.core.entity.description.HistoryStorage.HistoryType[scala.Boolean]) = new IsDraggableWithHistory(value, timestamp, history)
	}
	class IsDraggable(private val _value : IsDraggable.dataType, private val _timestamp: scala.Long, private val _history: simx.core.entity.description.HistoryStorage.HistoryType[scala.Boolean]) extends simx.core.entity.description.SVal[scala.Boolean,simx.core.entity.typeconversion.TypeInfo[scala.Boolean,scala.Boolean],simx.core.svaractor.semantictrait.base.ValueDescription[simx.core.svaractor.semantictrait.base.Base,simx.core.ontology.Symbols.boolean.SymbolType],simx.core.ontology.Symbols.isDraggable.SymbolType](_value, IsDraggable.valueDescription, IsDraggable, _timestamp, _history) {
		def withHistory = new IsDraggableWithHistory(value, timestamp, history)
	}
	class IsDraggableWithHistory(_v: scala.Boolean, _t: scala.Long, _h: simx.core.entity.description.HistoryStorage.HistoryType[scala.Boolean]) extends IsDraggable(_v,_t,_h) with SValHistory[scala.Boolean,simx.core.ontology.Symbols.isDraggable.SymbolType,IsDraggable] {
		def newNonHistoryInstance(value: scala.Boolean) = IsDraggable(value)
	}
	object IsElastic extends simx.core.ontology.SValDescription[scala.Boolean,scala.Boolean,simx.core.svaractor.semantictrait.base.ValueDescription[simx.core.svaractor.semantictrait.base.Base,simx.core.ontology.Symbols.boolean.SymbolType],simx.core.ontology.Symbols.isElastic.SymbolType](simx.core.ontology.types.Boolean as simx.core.ontology.Symbols.isElastic definedAt "http://www.hci.uni-wuerzburg.de/ontologies/simx/components/renderer/Gui/Gui.owl#IsElastic") with simx.core.ontology.types.SemanticSValType[IsElastic] {
		override def apply(value: dataType): SemanticSValType = new IsElastic(value, -1L, Nil)
		override def apply(value: dataType, timestamp : scala.Long): SemanticSValType = new IsElastic(value, timestamp, Nil)
		override def apply(value: dataType, timestamp : scala.Long, history: simx.core.entity.description.HistoryStorage.HistoryType[scala.Boolean]) = new IsElasticWithHistory(value, timestamp, history)
	}
	class IsElastic(private val _value : IsElastic.dataType, private val _timestamp: scala.Long, private val _history: simx.core.entity.description.HistoryStorage.HistoryType[scala.Boolean]) extends simx.core.entity.description.SVal[scala.Boolean,simx.core.entity.typeconversion.TypeInfo[scala.Boolean,scala.Boolean],simx.core.svaractor.semantictrait.base.ValueDescription[simx.core.svaractor.semantictrait.base.Base,simx.core.ontology.Symbols.boolean.SymbolType],simx.core.ontology.Symbols.isElastic.SymbolType](_value, IsElastic.valueDescription, IsElastic, _timestamp, _history) {
		def withHistory = new IsElasticWithHistory(value, timestamp, history)
	}
	class IsElasticWithHistory(_v: scala.Boolean, _t: scala.Long, _h: simx.core.entity.description.HistoryStorage.HistoryType[scala.Boolean]) extends IsElastic(_v,_t,_h) with SValHistory[scala.Boolean,simx.core.ontology.Symbols.isElastic.SymbolType,IsElastic] {
		def newNonHistoryInstance(value: scala.Boolean) = IsElastic(value)
	}
	object IsLoot extends simx.core.ontology.SValDescription[scala.Boolean,scala.Boolean,simx.core.svaractor.semantictrait.base.ValueDescription[simx.core.svaractor.semantictrait.base.Base,simx.core.ontology.Symbols.boolean.SymbolType],simx.core.ontology.Symbols.isLoot.SymbolType](simx.core.ontology.types.Boolean as simx.core.ontology.Symbols.isLoot definedAt "http://www.hci.uni-wuerzburg.de/ontologies/simx/components/renderer/Gui/Gui.owl#IsLoot") with simx.core.ontology.types.SemanticSValType[IsLoot] {
		override def apply(value: dataType): SemanticSValType = new IsLoot(value, -1L, Nil)
		override def apply(value: dataType, timestamp : scala.Long): SemanticSValType = new IsLoot(value, timestamp, Nil)
		override def apply(value: dataType, timestamp : scala.Long, history: simx.core.entity.description.HistoryStorage.HistoryType[scala.Boolean]) = new IsLootWithHistory(value, timestamp, history)
	}
	class IsLoot(private val _value : IsLoot.dataType, private val _timestamp: scala.Long, private val _history: simx.core.entity.description.HistoryStorage.HistoryType[scala.Boolean]) extends simx.core.entity.description.SVal[scala.Boolean,simx.core.entity.typeconversion.TypeInfo[scala.Boolean,scala.Boolean],simx.core.svaractor.semantictrait.base.ValueDescription[simx.core.svaractor.semantictrait.base.Base,simx.core.ontology.Symbols.boolean.SymbolType],simx.core.ontology.Symbols.isLoot.SymbolType](_value, IsLoot.valueDescription, IsLoot, _timestamp, _history) {
		def withHistory = new IsLootWithHistory(value, timestamp, history)
	}
	class IsLootWithHistory(_v: scala.Boolean, _t: scala.Long, _h: simx.core.entity.description.HistoryStorage.HistoryType[scala.Boolean]) extends IsLoot(_v,_t,_h) with SValHistory[scala.Boolean,simx.core.ontology.Symbols.isLoot.SymbolType,IsLoot] {
		def newNonHistoryInstance(value: scala.Boolean) = IsLoot(value)
	}
	
	object Layer extends simx.core.ontology.SValDescription[scala.Int,scala.Int,simx.core.svaractor.semantictrait.base.ValueDescription[simx.core.svaractor.semantictrait.base.Base,simx.core.ontology.Symbols.integer.SymbolType],simx.core.ontology.Symbols.layer.SymbolType](simx.core.ontology.types.Integer as simx.core.ontology.Symbols.layer definedAt "http://www.hci.uni-wuerzburg.de/ontologies/simx/components/renderer/Gui/Gui.owl#Layer") with simx.core.ontology.types.SemanticSValType[Layer] {
		override def apply(value: dataType): SemanticSValType = new Layer(value, -1L, Nil)
		override def apply(value: dataType, timestamp : scala.Long): SemanticSValType = new Layer(value, timestamp, Nil)
		override def apply(value: dataType, timestamp : scala.Long, history: simx.core.entity.description.HistoryStorage.HistoryType[scala.Int]) = new LayerWithHistory(value, timestamp, history)
	}
	class Layer(private val _value : Layer.dataType, private val _timestamp: scala.Long, private val _history: simx.core.entity.description.HistoryStorage.HistoryType[scala.Int]) extends simx.core.entity.description.SVal[scala.Int,simx.core.entity.typeconversion.TypeInfo[scala.Int,scala.Int],simx.core.svaractor.semantictrait.base.ValueDescription[simx.core.svaractor.semantictrait.base.Base,simx.core.ontology.Symbols.integer.SymbolType],simx.core.ontology.Symbols.layer.SymbolType](_value, Layer.valueDescription, Layer, _timestamp, _history) {
		def withHistory = new LayerWithHistory(value, timestamp, history)
	}
	class LayerWithHistory(_v: scala.Int, _t: scala.Long, _h: simx.core.entity.description.HistoryStorage.HistoryType[scala.Int]) extends Layer(_v,_t,_h) with SValHistory[scala.Int,simx.core.ontology.Symbols.layer.SymbolType,Layer] {
		def newNonHistoryInstance(value: scala.Int) = Layer(value)
	}
	
	object NotificationLinearOffset extends simx.core.ontology.SValDescription[scala.Float,scala.Float,simx.core.svaractor.semantictrait.base.ValueDescription[simx.core.svaractor.semantictrait.base.Base,simx.core.ontology.Symbols.real.SymbolType],simx.core.ontology.Symbols.notificationLinearOffset.SymbolType](simx.core.ontology.types.Real as simx.core.ontology.Symbols.notificationLinearOffset definedAt "http://www.hci.uni-wuerzburg.de/ontologies/simx/components/renderer/Gui/Gui.owl#NotificationLinearOffset") with simx.core.ontology.types.SemanticSValType[NotificationLinearOffset] {
		override def apply(value: dataType): SemanticSValType = new NotificationLinearOffset(value, -1L, Nil)
		override def apply(value: dataType, timestamp : scala.Long): SemanticSValType = new NotificationLinearOffset(value, timestamp, Nil)
		override def apply(value: dataType, timestamp : scala.Long, history: simx.core.entity.description.HistoryStorage.HistoryType[scala.Float]) = new NotificationLinearOffsetWithHistory(value, timestamp, history)
	}
	class NotificationLinearOffset(private val _value : NotificationLinearOffset.dataType, private val _timestamp: scala.Long, private val _history: simx.core.entity.description.HistoryStorage.HistoryType[scala.Float]) extends simx.core.entity.description.SVal[scala.Float,simx.core.entity.typeconversion.TypeInfo[scala.Float,scala.Float],simx.core.svaractor.semantictrait.base.ValueDescription[simx.core.svaractor.semantictrait.base.Base,simx.core.ontology.Symbols.real.SymbolType],simx.core.ontology.Symbols.notificationLinearOffset.SymbolType](_value, NotificationLinearOffset.valueDescription, NotificationLinearOffset, _timestamp, _history) {
		def withHistory = new NotificationLinearOffsetWithHistory(value, timestamp, history)
	}
	class NotificationLinearOffsetWithHistory(_v: scala.Float, _t: scala.Long, _h: simx.core.entity.description.HistoryStorage.HistoryType[scala.Float]) extends NotificationLinearOffset(_v,_t,_h) with SValHistory[scala.Float,simx.core.ontology.Symbols.notificationLinearOffset.SymbolType,NotificationLinearOffset] {
		def newNonHistoryInstance(value: scala.Float) = NotificationLinearOffset(value)
	}
	object NotificationLinearVelocity extends simx.core.ontology.SValDescription[scala.Boolean,scala.Boolean,simx.core.svaractor.semantictrait.base.ValueDescription[simx.core.svaractor.semantictrait.base.Base,simx.core.ontology.Symbols.boolean.SymbolType],simx.core.ontology.Symbols.notificationLinearVelocity.SymbolType](simx.core.ontology.types.Boolean as simx.core.ontology.Symbols.notificationLinearVelocity definedAt "http://www.hci.uni-wuerzburg.de/ontologies/simx/components/renderer/Gui/Gui.owl#NotificationLinearVelocity") with simx.core.ontology.types.SemanticSValType[NotificationLinearVelocity] {
		override def apply(value: dataType): SemanticSValType = new NotificationLinearVelocity(value, -1L, Nil)
		override def apply(value: dataType, timestamp : scala.Long): SemanticSValType = new NotificationLinearVelocity(value, timestamp, Nil)
		override def apply(value: dataType, timestamp : scala.Long, history: simx.core.entity.description.HistoryStorage.HistoryType[scala.Boolean]) = new NotificationLinearVelocityWithHistory(value, timestamp, history)
	}
	class NotificationLinearVelocity(private val _value : NotificationLinearVelocity.dataType, private val _timestamp: scala.Long, private val _history: simx.core.entity.description.HistoryStorage.HistoryType[scala.Boolean]) extends simx.core.entity.description.SVal[scala.Boolean,simx.core.entity.typeconversion.TypeInfo[scala.Boolean,scala.Boolean],simx.core.svaractor.semantictrait.base.ValueDescription[simx.core.svaractor.semantictrait.base.Base,simx.core.ontology.Symbols.boolean.SymbolType],simx.core.ontology.Symbols.notificationLinearVelocity.SymbolType](_value, NotificationLinearVelocity.valueDescription, NotificationLinearVelocity, _timestamp, _history) {
		def withHistory = new NotificationLinearVelocityWithHistory(value, timestamp, history)
	}
	class NotificationLinearVelocityWithHistory(_v: scala.Boolean, _t: scala.Long, _h: simx.core.entity.description.HistoryStorage.HistoryType[scala.Boolean]) extends NotificationLinearVelocity(_v,_t,_h) with SValHistory[scala.Boolean,simx.core.ontology.Symbols.notificationLinearVelocity.SymbolType,NotificationLinearVelocity] {
		def newNonHistoryInstance(value: scala.Boolean) = NotificationLinearVelocity(value)
	}
	
	object PosX extends simx.core.ontology.SValDescription[scala.Float,scala.Float,simx.core.svaractor.semantictrait.base.ValueDescription[simx.core.svaractor.semantictrait.base.Base,simx.core.ontology.Symbols.real.SymbolType],simx.core.ontology.Symbols.posX.SymbolType](simx.core.ontology.types.Real as simx.core.ontology.Symbols.posX definedAt "http://www.hci.uni-wuerzburg.de/ontologies/simx/components/renderer/Gui/Gui.owl#PosX") with simx.core.ontology.types.SemanticSValType[PosX] {
		override def apply(value: dataType): SemanticSValType = new PosX(value, -1L, Nil)
		override def apply(value: dataType, timestamp : scala.Long): SemanticSValType = new PosX(value, timestamp, Nil)
		override def apply(value: dataType, timestamp : scala.Long, history: simx.core.entity.description.HistoryStorage.HistoryType[scala.Float]) = new PosXWithHistory(value, timestamp, history)
	}
	class PosX(private val _value : PosX.dataType, private val _timestamp: scala.Long, private val _history: simx.core.entity.description.HistoryStorage.HistoryType[scala.Float]) extends simx.core.entity.description.SVal[scala.Float,simx.core.entity.typeconversion.TypeInfo[scala.Float,scala.Float],simx.core.svaractor.semantictrait.base.ValueDescription[simx.core.svaractor.semantictrait.base.Base,simx.core.ontology.Symbols.real.SymbolType],simx.core.ontology.Symbols.posX.SymbolType](_value, PosX.valueDescription, PosX, _timestamp, _history) {
		def withHistory = new PosXWithHistory(value, timestamp, history)
	}
	class PosXWithHistory(_v: scala.Float, _t: scala.Long, _h: simx.core.entity.description.HistoryStorage.HistoryType[scala.Float]) extends PosX(_v,_t,_h) with SValHistory[scala.Float,simx.core.ontology.Symbols.posX.SymbolType,PosX] {
		def newNonHistoryInstance(value: scala.Float) = PosX(value)
	}
	object PosY extends simx.core.ontology.SValDescription[scala.Float,scala.Float,simx.core.svaractor.semantictrait.base.ValueDescription[simx.core.svaractor.semantictrait.base.Base,simx.core.ontology.Symbols.real.SymbolType],simx.core.ontology.Symbols.posY.SymbolType](simx.core.ontology.types.Real as simx.core.ontology.Symbols.posY definedAt "http://www.hci.uni-wuerzburg.de/ontologies/simx/components/renderer/Gui/Gui.owl#PosY") with simx.core.ontology.types.SemanticSValType[PosY] {
		override def apply(value: dataType): SemanticSValType = new PosY(value, -1L, Nil)
		override def apply(value: dataType, timestamp : scala.Long): SemanticSValType = new PosY(value, timestamp, Nil)
		override def apply(value: dataType, timestamp : scala.Long, history: simx.core.entity.description.HistoryStorage.HistoryType[scala.Float]) = new PosYWithHistory(value, timestamp, history)
	}
	class PosY(private val _value : PosY.dataType, private val _timestamp: scala.Long, private val _history: simx.core.entity.description.HistoryStorage.HistoryType[scala.Float]) extends simx.core.entity.description.SVal[scala.Float,simx.core.entity.typeconversion.TypeInfo[scala.Float,scala.Float],simx.core.svaractor.semantictrait.base.ValueDescription[simx.core.svaractor.semantictrait.base.Base,simx.core.ontology.Symbols.real.SymbolType],simx.core.ontology.Symbols.posY.SymbolType](_value, PosY.valueDescription, PosY, _timestamp, _history) {
		def withHistory = new PosYWithHistory(value, timestamp, history)
	}
	class PosYWithHistory(_v: scala.Float, _t: scala.Long, _h: simx.core.entity.description.HistoryStorage.HistoryType[scala.Float]) extends PosY(_v,_t,_h) with SValHistory[scala.Float,simx.core.ontology.Symbols.posY.SymbolType,PosY] {
		def newNonHistoryInstance(value: scala.Float) = PosY(value)
	}
	
	object ShaderColor extends simx.core.ontology.SValDescription[simplex3d.math.floatx.ConstVec4f,simplex3d.math.floatx.ConstVec4f,simx.core.svaractor.semantictrait.base.ValueDescription[simx.core.svaractor.semantictrait.base.Base,simx.core.ontology.Symbols.vector4.SymbolType],simx.core.ontology.Symbols.shaderColor.SymbolType](simx.core.ontology.types.Vector4 as simx.core.ontology.Symbols.shaderColor definedAt "http://www.hci.uni-wuerzburg.de/ontologies/simx/components/renderer/Gui/Gui.owl#ShaderColor") with simx.core.ontology.types.SemanticSValType[ShaderColor] {
		override def apply(value: dataType): SemanticSValType = new ShaderColor(value, -1L, Nil)
		override def apply(value: dataType, timestamp : scala.Long): SemanticSValType = new ShaderColor(value, timestamp, Nil)
		override def apply(value: dataType, timestamp : scala.Long, history: simx.core.entity.description.HistoryStorage.HistoryType[simplex3d.math.floatx.ConstVec4f]) = new ShaderColorWithHistory(value, timestamp, history)
	}
	class ShaderColor(private val _value : ShaderColor.dataType, private val _timestamp: scala.Long, private val _history: simx.core.entity.description.HistoryStorage.HistoryType[simplex3d.math.floatx.ConstVec4f]) extends simx.core.entity.description.SVal[simplex3d.math.floatx.ConstVec4f,simx.core.entity.typeconversion.TypeInfo[simplex3d.math.floatx.ConstVec4f,simplex3d.math.floatx.ConstVec4f],simx.core.svaractor.semantictrait.base.ValueDescription[simx.core.svaractor.semantictrait.base.Base,simx.core.ontology.Symbols.vector4.SymbolType],simx.core.ontology.Symbols.shaderColor.SymbolType](_value, ShaderColor.valueDescription, ShaderColor, _timestamp, _history) {
		def withHistory = new ShaderColorWithHistory(value, timestamp, history)
	}
	class ShaderColorWithHistory(_v: simplex3d.math.floatx.ConstVec4f, _t: scala.Long, _h: simx.core.entity.description.HistoryStorage.HistoryType[simplex3d.math.floatx.ConstVec4f]) extends ShaderColor(_v,_t,_h) with SValHistory[simplex3d.math.floatx.ConstVec4f,simx.core.ontology.Symbols.shaderColor.SymbolType,ShaderColor] {
		def newNonHistoryInstance(value: simplex3d.math.floatx.ConstVec4f) = ShaderColor(value)
	}
	object ShaderDurationInSec extends simx.core.ontology.SValDescription[scala.Float,scala.Float,simx.core.svaractor.semantictrait.base.ValueDescription[simx.core.svaractor.semantictrait.base.ValueDescription[simx.core.svaractor.semantictrait.base.Base,simx.core.ontology.Symbols.real.SymbolType],simx.core.ontology.Symbols.timeInSeconds.SymbolType],simx.core.ontology.Symbols.shaderDurationInSec.SymbolType](simx.core.ontology.types.TimeInSeconds as simx.core.ontology.Symbols.shaderDurationInSec definedAt "http://www.hci.uni-wuerzburg.de/ontologies/simx/components/renderer/Gui/Gui.owl#ShaderDurationInSec") with simx.core.ontology.types.SemanticSValType[ShaderDurationInSec] {
		override def apply(value: dataType): SemanticSValType = new ShaderDurationInSec(value, -1L, Nil)
		override def apply(value: dataType, timestamp : scala.Long): SemanticSValType = new ShaderDurationInSec(value, timestamp, Nil)
		override def apply(value: dataType, timestamp : scala.Long, history: simx.core.entity.description.HistoryStorage.HistoryType[scala.Float]) = new ShaderDurationInSecWithHistory(value, timestamp, history)
	}
	class ShaderDurationInSec(private val _value : ShaderDurationInSec.dataType, private val _timestamp: scala.Long, private val _history: simx.core.entity.description.HistoryStorage.HistoryType[scala.Float]) extends simx.core.entity.description.SVal[scala.Float,simx.core.entity.typeconversion.TypeInfo[scala.Float,scala.Float],simx.core.svaractor.semantictrait.base.ValueDescription[simx.core.svaractor.semantictrait.base.ValueDescription[simx.core.svaractor.semantictrait.base.Base,simx.core.ontology.Symbols.real.SymbolType],simx.core.ontology.Symbols.timeInSeconds.SymbolType],simx.core.ontology.Symbols.shaderDurationInSec.SymbolType](_value, ShaderDurationInSec.valueDescription, ShaderDurationInSec, _timestamp, _history) {
		def withHistory = new ShaderDurationInSecWithHistory(value, timestamp, history)
	}
	class ShaderDurationInSecWithHistory(_v: scala.Float, _t: scala.Long, _h: simx.core.entity.description.HistoryStorage.HistoryType[scala.Float]) extends ShaderDurationInSec(_v,_t,_h) with SValHistory[scala.Float,simx.core.ontology.Symbols.shaderDurationInSec.SymbolType,ShaderDurationInSec] {
		def newNonHistoryInstance(value: scala.Float) = ShaderDurationInSec(value)
	}
	object ShaderRadiusInMeter extends simx.core.ontology.SValDescription[scala.Float,scala.Float,simx.core.svaractor.semantictrait.base.ValueDescription[simx.core.svaractor.semantictrait.base.Base,simx.core.ontology.Symbols.real.SymbolType],simx.core.ontology.Symbols.shaderRadiusInMeter.SymbolType](simx.core.ontology.types.Real as simx.core.ontology.Symbols.shaderRadiusInMeter definedAt "http://www.hci.uni-wuerzburg.de/ontologies/simx/components/renderer/Gui/Gui.owl#ShaderRadiusInMeter") with simx.core.ontology.types.SemanticSValType[ShaderRadiusInMeter] {
		override def apply(value: dataType): SemanticSValType = new ShaderRadiusInMeter(value, -1L, Nil)
		override def apply(value: dataType, timestamp : scala.Long): SemanticSValType = new ShaderRadiusInMeter(value, timestamp, Nil)
		override def apply(value: dataType, timestamp : scala.Long, history: simx.core.entity.description.HistoryStorage.HistoryType[scala.Float]) = new ShaderRadiusInMeterWithHistory(value, timestamp, history)
	}
	class ShaderRadiusInMeter(private val _value : ShaderRadiusInMeter.dataType, private val _timestamp: scala.Long, private val _history: simx.core.entity.description.HistoryStorage.HistoryType[scala.Float]) extends simx.core.entity.description.SVal[scala.Float,simx.core.entity.typeconversion.TypeInfo[scala.Float,scala.Float],simx.core.svaractor.semantictrait.base.ValueDescription[simx.core.svaractor.semantictrait.base.Base,simx.core.ontology.Symbols.real.SymbolType],simx.core.ontology.Symbols.shaderRadiusInMeter.SymbolType](_value, ShaderRadiusInMeter.valueDescription, ShaderRadiusInMeter, _timestamp, _history) {
		def withHistory = new ShaderRadiusInMeterWithHistory(value, timestamp, history)
	}
	class ShaderRadiusInMeterWithHistory(_v: scala.Float, _t: scala.Long, _h: simx.core.entity.description.HistoryStorage.HistoryType[scala.Float]) extends ShaderRadiusInMeter(_v,_t,_h) with SValHistory[scala.Float,simx.core.ontology.Symbols.shaderRadiusInMeter.SymbolType,ShaderRadiusInMeter] {
		def newNonHistoryInstance(value: scala.Float) = ShaderRadiusInMeter(value)
	}
	object Shape extends simx.core.ontology.SValDescription[simx.components.renderer.gui.Shape,simx.components.renderer.gui.Shape,simx.core.svaractor.semantictrait.base.Base,simx.core.ontology.Symbols.shape.SymbolType](simx.core.ontology.types.NullType as simx.core.ontology.Symbols.shape withType classOf[simx.components.renderer.gui.Shape] definedAt "http://www.hci.uni-wuerzburg.de/ontologies/simx/concepts/BasicTypes.owl#Shape") with simx.core.ontology.types.SemanticSValType[Shape] {
		override def apply(value: dataType): SemanticSValType = new Shape(value, -1L, Nil)
		override def apply(value: dataType, timestamp : scala.Long): SemanticSValType = new Shape(value, timestamp, Nil)
		override def apply(value: dataType, timestamp : scala.Long, history: simx.core.entity.description.HistoryStorage.HistoryType[simx.components.renderer.gui.Shape]) = new ShapeWithHistory(value, timestamp, history)
	}
	class Shape(private val _value : Shape.dataType, private val _timestamp: scala.Long, private val _history: simx.core.entity.description.HistoryStorage.HistoryType[simx.components.renderer.gui.Shape]) extends simx.core.entity.description.SVal[simx.components.renderer.gui.Shape,simx.core.entity.typeconversion.TypeInfo[simx.components.renderer.gui.Shape,simx.components.renderer.gui.Shape],simx.core.svaractor.semantictrait.base.Base,simx.core.ontology.Symbols.shape.SymbolType](_value, Shape.valueDescription, Shape, _timestamp, _history) {
		def withHistory = new ShapeWithHistory(value, timestamp, history)
	}
	class ShapeWithHistory(_v: simx.components.renderer.gui.Shape, _t: scala.Long, _h: simx.core.entity.description.HistoryStorage.HistoryType[simx.components.renderer.gui.Shape]) extends Shape(_v,_t,_h) with SValHistory[simx.components.renderer.gui.Shape,simx.core.ontology.Symbols.shape.SymbolType,Shape] {
		def newNonHistoryInstance(value: simx.components.renderer.gui.Shape) = Shape(value)
	}
	
	object TangibleList extends simx.core.ontology.SValDescription[scala.List[scala.Symbol],scala.List[scala.Symbol],simx.core.svaractor.semantictrait.base.ValueDescription[simx.core.svaractor.semantictrait.base.Base,simx.core.ontology.Symbols.identifiers.SymbolType],simx.core.ontology.Symbols.tangibleList.SymbolType](simx.core.ontology.types.Identifiers as simx.core.ontology.Symbols.tangibleList definedAt "http://www.hci.uni-wuerzburg.de/ontologies/simx/components/renderer/Gui/Gui.owl#TangibleList") with simx.core.ontology.types.SemanticSValType[TangibleList] {
		override def apply(value: dataType): SemanticSValType = new TangibleList(value, -1L, Nil)
		override def apply(value: dataType, timestamp : scala.Long): SemanticSValType = new TangibleList(value, timestamp, Nil)
		override def apply(value: dataType, timestamp : scala.Long, history: simx.core.entity.description.HistoryStorage.HistoryType[scala.List[scala.Symbol]]) = new TangibleListWithHistory(value, timestamp, history)
	}
	class TangibleList(private val _value : TangibleList.dataType, private val _timestamp: scala.Long, private val _history: simx.core.entity.description.HistoryStorage.HistoryType[scala.List[scala.Symbol]]) extends simx.core.entity.description.SVal[scala.List[scala.Symbol],simx.core.entity.typeconversion.TypeInfo[scala.List[scala.Symbol],scala.List[scala.Symbol]],simx.core.svaractor.semantictrait.base.ValueDescription[simx.core.svaractor.semantictrait.base.Base,simx.core.ontology.Symbols.identifiers.SymbolType],simx.core.ontology.Symbols.tangibleList.SymbolType](_value, TangibleList.valueDescription, TangibleList, _timestamp, _history) {
		def withHistory = new TangibleListWithHistory(value, timestamp, history)
	}
	class TangibleListWithHistory(_v: scala.List[scala.Symbol], _t: scala.Long, _h: simx.core.entity.description.HistoryStorage.HistoryType[scala.List[scala.Symbol]]) extends TangibleList(_v,_t,_h) with SValHistory[scala.List[scala.Symbol],simx.core.ontology.Symbols.tangibleList.SymbolType,TangibleList] {
		def newNonHistoryInstance(value: scala.List[scala.Symbol]) = TangibleList(value)
	}
}